AWSTemplateFormatVersion: '2010-09-09'
Description: sam-app
Transform:
  - AWS::Serverless-2016-10-31
Resources:
  ApiGatewayApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: Prod
      Cors:
        AllowMethods: '''OPTIONS, POST, GET'''
        AllowHeaders: '''Content-Type'''
        AllowOrigin: '''*'''
  getAllItemsFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: backend/
      Handler: src/handlers/get-all-items.getAllItemsHandler
      Runtime: nodejs18.x
      Architectures:
        - x86_64
      MemorySize: 128
      Timeout: 100
      Description: >-
        A simple example includes a HTTP get method to get all items by id from
        a DynamoDB table.
      Policies:
        - DynamoDBCrudPolicy:
            TableName:
              Ref: SampleTable
      Environment:
        Variables:
          SAMPLE_TABLE:
            Ref: SampleTable
          ENDPOINT_OVERRIDE: ''
      Events:
        Api:
          Type: Api
          Properties:
            Path: /
            Method: GET
            RestApiId:
              Ref: ApiGatewayApi
  getByIdFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: backend/
      Handler: src/handlers/get-by-id.getByIdHandler
      Runtime: nodejs18.x
      Architectures:
        - x86_64
      MemorySize: 128
      Timeout: 100
      Description: >-
        A simple example includes a HTTP get method to get one item by id from a
        DynamoDB table.
      Policies:
        - DynamoDBCrudPolicy:
            TableName:
              Ref: SampleTable
      Environment:
        Variables:
          SAMPLE_TABLE:
            Ref: SampleTable
          ENDPOINT_OVERRIDE: ''
      Events:
        Api:
          Type: Api
          Properties:
            Path: /{id}
            Method: GET
            RestApiId:
              Ref: ApiGatewayApi
  putItemFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: backend/
      Handler: src/handlers/put-item.putItemHandler
      Runtime: nodejs18.x
      Architectures:
        - x86_64
      MemorySize: 128
      Timeout: 100
      Description: >-
        A simple example includes a HTTP post method to add one item to a
        DynamoDB table.
      Policies:
        - DynamoDBCrudPolicy:
            TableName:
              Ref: SampleTable
      Environment:
        Variables:
          SAMPLE_TABLE:
            Ref: SampleTable
          ENDPOINT_OVERRIDE: ''
      Events:
        Api:
          Type: Api
          Properties:
            Path: /
            Method: POST
            RestApiId:
              Ref: ApiGatewayApi
  SampleTable:
    Type: AWS::Serverless::SimpleTable
    Properties:
      PrimaryKey:
        Name: id
        Type: String
      ProvisionedThroughput:
        ReadCapacityUnits: 2
        WriteCapacityUnits: 2
  CloudFrontDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Origins:
          - DomainName:
              Fn::GetAtt:
                - WebSiteBucket
                - RegionalDomainName
            Id: myS3Origin
            OriginAccessControlId:
              Fn::GetAtt:
                - CloudFrontOriginAccessControl
                - Id
            S3OriginConfig:
              OriginAccessIdentity: ''
        Enabled: true
        DefaultRootObject: index.html
        HttpVersion: http2
        DefaultCacheBehavior:
          AllowedMethods:
            - DELETE
            - GET
            - HEAD
            - OPTIONS
            - PATCH
            - POST
            - PUT
          CachedMethods:
            - GET
            - HEAD
          TargetOriginId: myS3Origin
          ForwardedValues:
            QueryString: false
            Cookies:
              Forward: none
          ViewerProtocolPolicy: allow-all
          MinTTL: 0
          DefaultTTL: 3600
          MaxTTL: 86400
        PriceClass: PriceClass_200
        Restrictions:
          GeoRestriction:
            RestrictionType: whitelist
            Locations:
              - US
              - CA
              - GB
              - DE
        ViewerCertificate:
          CloudFrontDefaultCertificate: true
  CloudFrontOriginAccessControl:
    Type: AWS::CloudFront::OriginAccessControl
    Properties:
      OriginAccessControlConfig:
        Name:
          Fn::Sub: ${WebSiteBucket} OAC
        OriginAccessControlOriginType: s3
        SigningBehavior: always
        SigningProtocol: sigv4
  WebSiteBucket:
    Type: AWS::S3::Bucket
  WebSiteBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket:
        Ref: WebSiteBucket
      PolicyDocument:
        Version: '2012-10-17'
        Id: PolicyForCloudFrontPrivateContent
        Statement:
          - Sid: AllowCloudFrontServicePrincipal
            Effect: Allow
            Principal:
              Service: cloudfront.amazonaws.com
            Action: s3:GetObject
            Resource:
              Fn::Join:
                - ''
                - - 'arn:aws:s3:::'
                  - Ref: WebSiteBucket
                  - /*
            Condition:
              StringEquals:
                AWS:SourceArn:
                  Fn::Join:
                    - ''
                    - - 'arn:aws:cloudfront::'
                      - Ref: AWS::AccountId
                      - ':distribution/'
                      - Ref: CloudFrontDistribution
  ApiGatewayApi2:
    Type: AWS::Serverless::Api
    Properties:
      StageName: Prod
      Cors:
        AllowMethods: '''OPTIONS, POST, GET'''
        AllowHeaders: '''Content-Type'''
        AllowOrigin: '''*'''
  WebSiteBucket2:
    Type: AWS::S3::Bucket
  WebSiteBucket3bucket:
    Type: AWS::S3::Bucket
  WebSiteBucket3bucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket:
        Ref: WebSiteBucket
      PolicyDocument:
        Version: '2012-10-17'
        Id: PolicyForCloudFrontPrivateContent
        Statement:
          - Sid: AllowCloudFrontServicePrincipal
            Effect: Allow
            Principal:
              Service: cloudfront.amazonaws.com
            Action: s3:GetObject
            Resource:
              Fn::Join:
                - ''
                - - 'arn:aws:s3:::'
                  - Ref: WebSiteBucket
                  - /*
            Condition:
              StringEquals:
                AWS:SourceArn:
                  Fn::Join:
                    - ''
                    - - 'arn:aws:cloudfront::'
                      - Ref: AWS::AccountId
                      - ':distribution/'
                      - Ref: CloudFrontDistribution
Outputs:
  APIGatewayEndpoint:
    Description: API Gateway endpoint URL for Prod stage
    Value:
      Fn::Sub: https://${ApiGatewayApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/
  CloudFrontDistributionId:
    Description: CloudFront Distribution ID for hosting web front end
    Value:
      Ref: CloudFrontDistribution
  CloudFrontDistributionDomainName:
    Description: CloudFront Distribution Domain Name for accessing web front end
    Value:
      Fn::GetAtt:
        - CloudFrontDistribution
        - DomainName
  WebS3BucketName:
    Description: S3 Bucket for hosting web frontend
    Value:
      Ref: WebSiteBucket
