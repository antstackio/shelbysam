Type: AWS::Serverless::Api
Properties:
  Name:
    Fn::Sub: ${CognitoUserPoolDomain}-API
  StageName: prod
  DefinitionBody:
    openapi: 3.0.1
    info:
      title: acd-api
      version: '1.0'
    paths:
      /getUserInfo:
        post:
          security:
            - CognitoAuthorizer: []
          x-amazon-apigateway-integration:
            httpMethod: POST
            uri:
              Fn::Sub: >-
                arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetUserInfo.Arn}/invocations
            passthroughBehavior: when_no_match
            type: aws_proxy
        options:
          responses:
            '200':
              description: 200 response
              headers:
                Access-Control-Allow-Origin:
                  schema:
                    type: string
                Access-Control-Allow-Methods:
                  schema:
                    type: string
                Access-Control-Allow-Headers:
                  schema:
                    type: string
              content: {}
          x-amazon-apigateway-integration:
            responses:
              default:
                statusCode: '200'
                responseParameters:
                  method.response.header.Access-Control-Allow-Methods: '''OPTIONS,POST'''
                  method.response.header.Access-Control-Allow-Headers: >-
                    'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'
                  method.response.header.Access-Control-Allow-Origin:
                    Fn::Sub: '''https://${CloudFrontDistribution.DomainName}'''
                responseTemplates:
                  application/json: |
                    {}
            requestTemplates:
              application/json: |
                {
                  "statusCode" : 200
                }
            passthroughBehavior: when_no_match
            type: mock
      /manualApproval:
        post:
          security:
            - CognitoAuthorizer: []
          x-amazon-apigateway-integration:
            httpMethod: POST
            uri:
              Fn::Sub: >-
                arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ManualApproval.Arn}/invocations
            passthroughBehavior: when_no_match
            type: aws_proxy
        options:
          responses:
            '200':
              description: 200 response
              headers:
                Access-Control-Allow-Origin:
                  schema:
                    type: string
                Access-Control-Allow-Methods:
                  schema:
                    type: string
                Access-Control-Allow-Headers:
                  schema:
                    type: string
              content: {}
          x-amazon-apigateway-integration:
            responses:
              default:
                statusCode: '200'
                responseParameters:
                  method.response.header.Access-Control-Allow-Methods: '''OPTIONS,POST'''
                  method.response.header.Access-Control-Allow-Headers: >-
                    'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'
                  method.response.header.Access-Control-Allow-Origin:
                    Fn::Sub: '''https://${CloudFrontDistribution.DomainName}'''
                responseTemplates:
                  application/json: |
                    {}
            requestTemplates:
              application/json: |
                {
                  "statusCode" : 200
                }
            passthroughBehavior: when_no_match
            type: mock
      /requestLeave:
        post:
          responses:
            '200':
              description: 200 response
              headers:
                Access-Control-Allow-Origin:
                  schema:
                    type: string
              content: {}
            '400':
              description: 400 response
              content: {}
          security:
            - CognitoAuthorizer: []
          x-amazon-apigateway-integration:
            credentials:
              Fn::GetAtt:
                - LeaveApprovalApi2Role
                - Arn
            httpMethod: POST
            uri:
              Fn::Sub: arn:aws:apigateway:${AWS::Region}:states:action/StartExecution
            responses:
              '200':
                statusCode: '200'
                responseParameters:
                  method.response.header.Access-Control-Allow-Origin: '''*'''
              '400':
                statusCode: '400'
            requestTemplates:
              application/json:
                Fn::Sub: >-
                  {"input": "$util.escapeJavaScript($input.json('$'))",
                  "stateMachineArn": "${LeaveApplicationStepFunction}"}
            passthroughBehavior: when_no_match
            type: aws
        options:
          responses:
            '200':
              description: 200 response
              headers:
                Access-Control-Allow-Origin:
                  schema:
                    type: string
                Access-Control-Allow-Methods:
                  schema:
                    type: string
                Access-Control-Allow-Headers:
                  schema:
                    type: string
              content: {}
          x-amazon-apigateway-integration:
            responses:
              default:
                statusCode: '200'
                responseParameters:
                  method.response.header.Access-Control-Allow-Methods: '''OPTIONS,POST'''
                  method.response.header.Access-Control-Allow-Headers: >-
                    'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'
                  method.response.header.Access-Control-Allow-Origin:
                    Fn::Sub: '''https://${CloudFrontDistribution.DomainName}'''
                responseTemplates:
                  application/json: |
                    {}
            requestTemplates:
              application/json: |
                {
                  "statusCode" : 200
                }
            passthroughBehavior: when_no_match
            type: mock
    components:
      securitySchemes:
        CognitoAuthorizer:
          type: apiKey
          name: Authorization
          in: header
          x-amazon-apigateway-authtype: cognito_user_pools
          x-amazon-apigateway-authorizer:
            providerARNs:
              - Fn::Sub: >-
                  arn:aws:cognito-idp:${AWS::Region}:${AWS::AccountId}:userpool/${CognitoUserPool}
            type: cognito_user_pools
